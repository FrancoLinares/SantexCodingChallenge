{"version":3,"sources":["hooks/useStateWithStorage.tsx","hooks/useOrder.tsx","graphql/fragments.ts","graphql/queries.ts","components/Products/Product/styled.tsx","graphql/mutations.ts","components/Products/Product/Product.tsx","components/Pagination/styled.tsx","components/Pagination/index.tsx","components/Pagination/constants.ts","components/Products/ProductList/styled.tsx","components/Products/ProductList/ProductList.tsx"],"names":["useStateWithStorage","key","defaultValue","useState","storedValue","localStorage","getItem","JSON","parse","error","state","setState","value","setItem","stringify","useOrder","context","useContext","OrderContext","undefined","Error","setSubTotalContext","setSubTotal","setOrderCodeContext","setOrderCode","subTotalContext","useMemo","subTotal","orderCodeContext","orderCode","useEffect","PRODUCT_ASSETS_FRAGMENT","gql","CORE_PRODUCT_FIELDS_FRAGMENT","PRODUCT_VARIANT_FIELDS_FRAGMENT","ERROR_ORDER_PAGE","fragments","OrderModificationError","OrderLimitError","NegativeQuantityError","InsufficientStockError","GET_PRODUCTS","StyledCard","styled","Card","StyledImg","img","ADD_TO_CART_MUTATION","Product","variant","productName","description","product","productVariantId","id","price","currencyCode","name","assetURL","assets","source","setCartItems","useMutation","onCompleted","order","addItemToOrder","total","lines","code","addToCart","handleBuy","event","a","preventDefault","variables","quantity","alert","ITEM_ADDED_SUCCESSFULLY","data-testid","CardContent","Typography","color","gutterBottom","component","src","alt","CardActions","Button","size","onClick","PRODUCT_CARD_BUTTON_CONTENT","StyledNavigation","nav","Pagination","React","memo","currentPage","totalPages","setPage","role","aria-label","disabled","prevState","StyledGridItem","Grid","ProductList","page","useQuery","take","PAGE_SIZE","skip","data","loading","Math","round","products","totalItems","variantsByProducts","items","reduce","acc","variants","map","Loading","type","LOADING_TYPES","SKELETON","skeletonQuantity","GENERIC_ERROR","Object","entries","variantsByProduct","container","direction","justifyContent","alignItems","item","xs"],"mappings":"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","file":"static/js/5.b4676e30.chunk.js","sourcesContent":["import { useState } from 'react';\n\nexport default function useStateWithStorage(\n  key: string,\n  defaultValue: string | number | null\n) {\n  // Retrieve the state from local storage or use the initial value\n  const [state, setState] = useState(() => {\n    try {\n      const storedValue = localStorage.getItem(key);\n      return storedValue && storedValue !== 'undefined'\n        ? JSON.parse(storedValue)\n        : defaultValue;\n    } catch (error) {\n      return defaultValue;\n    }\n  });\n\n  // Update local storage whenever the state changes\n  const setStoredState = (value: any) => {\n    setState(value);\n\n    try {\n      localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n      // Do something\n    }\n  };\n\n  return [state, setStoredState];\n}\n","import { useContext, useEffect, useMemo } from 'react';\nimport { OrderContext } from '../providers/OrderProvider';\nimport useStateWithStorage from './useStateWithStorage';\n\nconst useOrder = () => {\n  const context = useContext(OrderContext);\n\n  if (context === undefined) {\n    throw new Error('Order Context must be initialized');\n  }\n\n  const { setSubTotal: setSubTotalContext, setOrderCode: setOrderCodeContext } =\n    context;\n  const subTotalContext = useMemo(() => context?.subTotal, [context?.subTotal]);\n  const orderCodeContext = useMemo(\n    () => context?.orderCode,\n    [context?.orderCode]\n  );\n\n  // Keep the local storage in sync\n  const [subTotal, setSubTotal] = useStateWithStorage('subTotal', 0);\n  const [orderCode, setOrderCode] = useStateWithStorage('orderCode', null);\n  useEffect(() => {\n    // If there is a subTotal in the local storage and subTotal of the context has an initial value ( '0' ),\n    // update the subTotal of the context to keep them synchronized.\n    if (!!subTotal && subTotalContext === 0) {\n      setSubTotalContext(subTotal);\n    }\n    // Same behavior for orderCode\n    if (!!orderCode && orderCodeContext === null) {\n      setOrderCodeContext(orderCode);\n    }\n    // If the context subTotal does not have an initial value (items are added to the order),\n    // update the subTotal of the local storage to keep them synchronized.\n    else if (!!subTotalContext || !!orderCodeContext) {\n      if (!!subTotalContext) setSubTotal(subTotalContext);\n      if (!!orderCodeContext) setOrderCode(orderCodeContext);\n    }\n  }, [subTotalContext, subTotal, orderCodeContext]);\n\n  return context;\n};\n\nexport default useOrder;\n","import { gql } from '@apollo/client';\n\nexport const PRODUCT_ASSETS_FRAGMENT = gql`\n  fragment ProductAssetsFragment on Asset {\n    id\n    name\n    source\n    preview\n  }\n`;\n\nexport const CORE_PRODUCT_FIELDS_FRAGMENT = gql`\n  fragment CoreProductFieldsFragment on Product {\n    id\n    name\n  }\n`;\n\nexport const PRODUCT_VARIANT_FIELDS_FRAGMENT = gql`\n  fragment ProductVariantFieldsFragment on ProductVariant {\n    id\n    name\n    productId\n    price\n    currencyCode\n  }\n`;\n\nexport const ERROR_ORDER_PAGE = {\n  fragments: {\n    OrderModificationError: gql`\n      fragment OrderModificationErrorFields on OrderModificationError {\n        message\n        errorCode\n      }\n    `,\n    OrderLimitError: gql`\n      fragment OrderLimitErrorFields on OrderLimitError {\n        message\n        errorCode\n        maxItems\n      }\n    `,\n    NegativeQuantityError: gql`\n      fragment NegativeQuantityErrorFields on NegativeQuantityError {\n        message\n        errorCode\n      }\n    `,\n    InsufficientStockError: gql`\n      fragment InsufficientStockErrorFields on InsufficientStockError {\n        message\n        errorCode\n      }\n    `,\n  },\n};\n","// Here we put queries. Remove next line\nimport { gql } from '@apollo/client';\nimport {\n  CORE_PRODUCT_FIELDS_FRAGMENT,\n  PRODUCT_ASSETS_FRAGMENT,\n  PRODUCT_VARIANT_FIELDS_FRAGMENT,\n} from './fragments';\n\nexport const GET_PRODUCTS = gql`\n  ${PRODUCT_ASSETS_FRAGMENT}\n  ${CORE_PRODUCT_FIELDS_FRAGMENT}\n  ${PRODUCT_VARIANT_FIELDS_FRAGMENT}\n  query getProducts($take: Int, $skip: Int) {\n    products(options: { take: $take, skip: $skip }) {\n      items {\n        ...CoreProductFieldsFragment\n        variants {\n          ...ProductVariantFieldsFragment\n          product {\n            ...CoreProductFieldsFragment\n            description\n            assets {\n              ...ProductAssetsFragment\n            }\n          }\n        }\n      }\n      totalItems\n    }\n  }\n`;\n","import Card from '@mui/material/Card';\nimport styled from 'styled-components';\n\nexport const StyledCard = styled(Card)`\n  margin: 3vh 3vw;\n  max-width: 450px;\n`;\n\nexport const StyledImg = styled.img`\n  width: 100%;\n`;\n","// Here we put mutations. Remove next line\nimport { gql } from '@apollo/client';\nimport { ERROR_ORDER_PAGE, PRODUCT_VARIANT_FIELDS_FRAGMENT } from './fragments';\n\nexport const ADD_TO_CART_MUTATION = gql`\n  ${ERROR_ORDER_PAGE.fragments.OrderModificationError}\n  ${ERROR_ORDER_PAGE.fragments.OrderLimitError}\n  ${ERROR_ORDER_PAGE.fragments.NegativeQuantityError}\n  ${ERROR_ORDER_PAGE.fragments.InsufficientStockError}\n  ${PRODUCT_VARIANT_FIELDS_FRAGMENT}\n  mutation addItemToOrder($productVariantId: ID!, $quantity: Int!) {\n    addItemToOrder(productVariantId: $productVariantId, quantity: $quantity) {\n      __typename\n      ... on Order {\n        id\n        state\n        totalQuantity\n        total\n        code\n        lines {\n          id\n          quantity\n          productVariant {\n            ...ProductVariantFieldsFragment\n          }\n        }\n      }\n      ...OrderModificationErrorFields\n      ...OrderLimitErrorFields\n      ...NegativeQuantityErrorFields\n      ...InsufficientStockErrorFields\n    }\n  }\n`;\n","import React from 'react';\nimport {\n  getProducts_products_items,\n  getProducts_products_items_variants,\n} from '../../../graphql/__generated__/getProducts';\nimport { Button, CardActions, CardContent, Typography } from '@mui/material';\nimport { StyledCard, StyledImg } from './styled';\nimport { PRODUCT_CARD_BUTTON_CONTENT } from '../contstants';\nimport { useMutation } from '@apollo/client';\nimport { ADD_TO_CART_MUTATION } from '../../../graphql/mutations';\nimport useOrder from '../../../hooks/useOrder';\nimport { addItemToOrder_addItemToOrder_Order } from '../../../graphql/__generated__/addItemToOrder';\nimport { ITEM_ADDED_SUCCESSFULLY } from '../../constants';\n\nconst Product = ({\n  variant,\n  productName,\n}: {\n  productName: getProducts_products_items['name'];\n  variant: getProducts_products_items_variants;\n}) => {\n  const { description } = variant.product;\n  const { id: productVariantId, price, currencyCode, name } = variant;\n  const assetURL = variant.product.assets[0].source;\n  const { setSubTotal, setCartItems, setOrderCode } = useOrder();\n\n  const onCompleteMutation = ({\n    addItemToOrder,\n  }: {\n    addItemToOrder: addItemToOrder_addItemToOrder_Order;\n  }) => {\n    // If the mutation was successful,\n    // update the context with the new data\n    const order = addItemToOrder;\n    // Checks to verify that the mutation was successful\n    if (order?.state === 'AddingItems' && !!order?.total) {\n      // Update the subtotal shared state - to keep it in sync with local storage\n      setSubTotal(order?.total);\n      // Add the new product to the cart shared state\n      setCartItems(order?.lines || []);\n      // Persist Order code\n      setOrderCode(order.code);\n    }\n  };\n\n  const [addToCart] = useMutation<{\n    addItemToOrder: addItemToOrder_addItemToOrder_Order;\n  }>(ADD_TO_CART_MUTATION, { onCompleted: onCompleteMutation });\n\n  const handleBuy = async (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n\n    await addToCart({\n      variables: {\n        productVariantId,\n        // For the purposes of this challenge, only one product can be added\n        quantity: 1,\n      },\n    });\n\n    alert(ITEM_ADDED_SUCCESSFULLY);\n  };\n\n  return (\n    <StyledCard\n      variant=\"outlined\"\n      data-testid={`product-variant-card-${productName}`}\n    >\n      <CardContent>\n        <Typography color=\"textSecondary\" gutterBottom>\n          {/* Product Type */}\n          {productName}\n        </Typography>\n        <Typography variant=\"h5\" component=\"h2\">\n          {name}\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\">\n          {description}\n        </Typography>\n      </CardContent>\n      <StyledImg src={assetURL} alt={name} />\n      <CardActions>\n        <Typography>Price: {`${price} ${currencyCode}`}</Typography>\n        <Button size=\"small\" onClick={handleBuy}>\n          {PRODUCT_CARD_BUTTON_CONTENT}\n        </Button>\n      </CardActions>\n    </StyledCard>\n  );\n};\n\nexport default Product;\n","import styled from 'styled-components';\n\nexport const StyledNavigation = styled.nav`\n  display: flex;\n  flex-wrap: nowrap;\n  align-content: center;\n  justify-content: space-between;\n  align-items: center;\n  margin: 5vh 3vw;\n`;\n","import React from 'react';\nimport { Button, Typography } from '@mui/material';\nimport {\n  ARIA_LABEL_CURRENT_PAGE,\n  ARIA_LABEL_NAV,\n  NEXT_BUTTON_LABEL,\n  PAGINATION_LABEL,\n  PREV_BUTTON_LABEL,\n} from './constants';\nimport { StyledNavigation } from './styled';\n\nexport type PaginationProps = {\n  currentPage: number;\n  totalPages: number;\n  setPage: React.Dispatch<React.SetStateAction<number>>;\n};\n\nconst Pagination = React.memo(\n  ({ currentPage, totalPages, setPage }: PaginationProps) => (\n    <StyledNavigation role=\"navigation\" aria-label={ARIA_LABEL_NAV}>\n      <Button\n        disabled={currentPage === 0}\n        onClick={() => setPage((prevState) => prevState - 1)}\n      >\n        {PREV_BUTTON_LABEL}\n      </Button>\n      <Typography\n        variant=\"h6\"\n        aria-label={`${ARIA_LABEL_CURRENT_PAGE} ${currentPage}`}\n      >\n        {PAGINATION_LABEL} {currentPage + 1} / {totalPages}\n      </Typography>\n      <Button\n        disabled={currentPage >= totalPages - 1}\n        onClick={() => setPage((prevState) => prevState + 1)}\n      >\n        {NEXT_BUTTON_LABEL}\n      </Button>\n    </StyledNavigation>\n  )\n);\n\nexport default Pagination;\n","export const ARIA_LABEL_NAV = 'Pagination Navigation';\nexport const ARIA_LABEL_CURRENT_PAGE = 'Current Page';\nexport const PREV_BUTTON_LABEL = 'Previous';\nexport const NEXT_BUTTON_LABEL = 'Next';\nexport const PAGINATION_LABEL = 'Page';\n","import Grid from '@mui/material/Grid';\nimport styled from 'styled-components';\n\nexport const StyledGridItem = styled(Grid)`\n  &&& {\n    max-width: 400px;\n  }\n`;\n","import { useState } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { GET_PRODUCTS } from '../../../graphql/queries';\nimport {\n  getProducts,\n  getProducts_products_items_variants,\n} from '../../../graphql/__generated__/getProducts';\nimport Product from '../Product/Product';\nimport { Grid, Typography } from '@mui/material';\nimport { GENERIC_ERROR } from '../../constants';\nimport Pagination from '../../Pagination';\nimport { LOADING_TYPES, PAGE_SIZE } from '../contstants';\nimport { StyledGridItem } from './styled';\nimport Loading from '../../UI/Loading';\n\nexport function ProductList() {\n  const [page, setPage] = useState(0);\n\n  const { data, loading, error } = useQuery<getProducts>(GET_PRODUCTS, {\n    variables: {\n      take: PAGE_SIZE,\n      skip: PAGE_SIZE * page,\n    },\n  });\n\n  const totalPages = Math.round((data?.products.totalItems || 0) / PAGE_SIZE);\n  const products = data?.products.items || [];\n  const variantsByProducts = products.reduce((acc, product) => {\n    const productName = product.name;\n\n    const variants = product.variants.map((variant) => ({\n      ...variant,\n      productName,\n    }));\n\n    acc[productName] = variants;\n\n    return acc;\n  }, {} as { [key: string]: getProducts_products_items_variants[] });\n\n  if (loading)\n    return <Loading type={LOADING_TYPES.SKELETON} skeletonQuantity={8} />;\n  if (error) return <h2>{GENERIC_ERROR}</h2>;\n\n  return (\n    <div>\n      {Object.entries(variantsByProducts).map(\n        ([productName, variantsByProduct]) => (\n          <div key={productName}>\n            <Typography variant=\"h5\" data-testid=\"product-name\">\n              {productName}\n            </Typography>\n            <Grid\n              container\n              direction=\"row\"\n              justifyContent=\"space-around\"\n              alignItems=\"center\"\n            >\n              {variantsByProduct.map((variant) => (\n                <StyledGridItem item xs={12} key={variant.id}>\n                  <Product variant={variant} productName={productName} />\n                </StyledGridItem>\n              ))}\n            </Grid>\n          </div>\n        )\n      )}\n      <Pagination\n        currentPage={page}\n        totalPages={totalPages}\n        setPage={setPage}\n      />\n    </div>\n  );\n}\n"],"sourceRoot":""}