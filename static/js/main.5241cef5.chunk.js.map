{"version":3,"sources":["apollo/client.ts","components/ErrorBoundary.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/Products/contstants.ts","providers/OrderProvider.tsx","components/constants.ts","components/UI/Skeleton.tsx","components/UI/Loading.tsx"],"names":["AUTH_TOKEN_KEY","httpLink","HttpLink","uri","credentials","afterwareLink","ApolloLink","operation","forward","map","response","authHeader","getContext","headers","get","localStorage","setItem","client","ApolloClient","link","from","setContext","request","authToken","getItem","authorization","cache","InMemoryCache","ErrorBoundary","props","state","hasError","error","errorInfo","console","this","setState","GENERIC_ERROR","children","Component","getDerivedStateFromError","Header","lazy","then","default","ProductList","App","fallback","Loading","ApolloProvider","apolloClient","OrderProvider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","commerceLink","createHttpLink","ReactDOM","render","StrictMode","document","getElementById","LOADING_TYPES","PRODUCT_CARD_BUTTON_CONTENT","PAGE_SIZE","OrderContext","createContext","undefined","useState","subTotal","setSubTotal","cartItems","setCartItems","context","orderCode","setOrderCode","Provider","value","ITEM_ADDED_SUCCESSFULLY","Variants","skeletonQuantity","Grid","container","sx","justifyContent","Array","_","i","item","Box","width","marginRight","m","Skeleton","variant","animation","height","Stack","spacing","fontSize","LoadingContainer","styled","div","type","DEFAULT","LoadingComponents","SKELETON","CircularProgress","data-testid"],"mappings":"4PAUMA,EAAiB,aAEjBC,EAAW,IAAIC,IAAS,CAC5BC,IALW,mCAQXC,YAAa,YAGTC,EAAgB,IAAIC,cAAW,SAACC,EAAWC,GAC/C,OAAOA,EAAQD,GAAWE,KAAI,SAACC,GAC7B,IACMC,EADUJ,EAAUK,aACCF,SAASG,QAAQC,IAAI,sBAMhD,OALIH,GAGFI,aAAaC,QAAQhB,EAAgBW,GAEhCD,QAuBIO,EAnBA,IAAIC,IAAa,CAC9BC,KAAMb,aAAWc,KAAK,CAGpBC,aAAW,SAACC,EAASf,GACnB,IAAMgB,EAAYR,aAAaS,QAAQxB,GACnCa,EAA+B,GAKnC,OAJIU,IACFV,EAAQY,cAAR,iBAAkCF,IAG7B,CAAEV,cAEXR,EACAJ,IAEFyB,MAAO,IAAIC,M,iDCrCPC,E,kDACJ,WAAYC,GAAe,IAAD,8BACxB,cAAMA,IACDC,MAAQ,CAAEC,UAAU,GAFD,E,qDAS1B,SAAkBC,EAAcC,GAE9BC,QAAQF,MAAM,kCAAmCA,EAAOC,GACxDE,KAAKC,SAAS,CAAEL,UAAU,M,oBAG5B,WACE,OAAII,KAAKL,MAAMC,SACN,6BAAKM,MAGPF,KAAKN,MAAMS,a,GArBMC,aAAtBX,EAMGY,yBAA2B,SAACR,GACjC,MAAO,CAAED,UAAU,IAkBRH,Q,QC7BTa,EAASC,gBAAK,kBAClB,8BAAqCC,MAAK,kBAAiB,CACzDC,QADwC,EAAGH,cAIzCI,EAAcH,gBAAK,kBACvB,oDAAwDC,MACtD,kBAAsB,CAAEC,QAAxB,EAAGC,mBAuBQC,MAnBf,WACE,OACE,mCACE,cAAC,WAAD,CAAUC,SAAU,cAACC,EAAA,EAAD,IAApB,SACE,cAACC,EAAA,EAAD,CAAgBhC,OAAQiC,EAAxB,SACE,cAACC,EAAA,EAAD,UACE,eAAC,EAAD,WACE,cAACV,EAAD,IACA,8BACE,cAACI,EAAD,kBCbDO,G,OAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCIRO,EAAeC,YAAe,CAClC1D,IAAK,qDACLU,QAAS,CACPY,cAAeV,aAAaS,QAAQ,cAArB,iBACDT,aAAaS,QAAQ,eAC/B,MAIFnB,EAAgB,IAAIC,cAAW,SAACC,EAAWC,GAC/C,OAAOA,EAAQD,GAAWE,KAAI,SAACC,GAC7B,IACMC,EADUJ,EAAUK,aACCF,SAASG,QAAQC,IAAI,sBAKhD,OAHIH,GACFI,aAAaC,QAAQ,aAAcL,GAE9BD,QAILO,EAAS,IAAIC,IAAa,CAC9BQ,MAAO,IAAIC,IACXR,KAAMb,aAAWc,KAAK,CAACf,EAAeuD,MAGxCE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACf,EAAA,EAAD,CAAgBhC,OAAQA,EAAxB,SACE,cAAC,EAAD,QAGJgD,SAASC,eAAe,SAM1Bd,K,gCCnDA,sGAAO,IAEKe,EAFCC,EAA8B,MAC9BC,EAAY,G,SACbF,K,kBAAAA,E,qBAAAA,M,oICWCG,EAAeC,6BAAqCC,GAEpDrB,EAAgB,SAAC,GAAiD,IAA/Cb,EAA8C,EAA9CA,SAA8C,EAC5CmC,mBAAgC,GADY,mBACrEC,EADqE,KAC3DC,EAD2D,OAE1CF,mBAAiC,IAFS,mBAErEG,EAFqE,KAE1DC,EAF0D,OAG1CJ,mBAAiC,MAHS,mBAKtEK,EAAU,CACdJ,WACAE,YACAG,UAR0E,KAS1EJ,cACAE,eACAG,aAX0E,MAc5E,OACE,cAACV,EAAaW,SAAd,CAAuBC,MAAOJ,EAA9B,SAAwCxC,M,gCC9B5C,oEAAO,IAAMD,EAAgB,0CAChB8C,EAA0B,2B,6HCIxB,SAASC,EAAT,GAIX,IAAD,IAHDC,wBAGC,MAHkB,EAGlB,EACD,OACE,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,GAAI,CAAEC,eAAgB,UAAtC,SACG,YAAI,IAAIC,MAAML,IAAmB5E,KAAI,SAACkF,EAAGC,GAAJ,OACpC,cAACN,EAAA,EAAD,CAAMO,MAAI,EAAV,SACE,eAACC,EAAA,EAAD,CAAKN,GAAI,CAAEO,MAAO,IAAKC,YAAa,GAAKC,EAAG,GAA5C,UACE,cAACC,EAAA,EAAD,CAAUC,QAAQ,cAAcC,UAAU,OAAOC,OAAQ,MACzD,uBACA,cAACP,EAAA,EAAD,UACE,eAACQ,EAAA,EAAD,CAAOC,QAAS,EAAhB,UAEE,cAACL,EAAA,EAAD,CAAUC,QAAQ,OAAOX,GAAI,CAAEgB,SAAU,UAGzC,cAACN,EAAA,EAAD,CAAUC,QAAQ,WAAWJ,MAAO,GAAIM,OAAQ,KAChD,cAACH,EAAA,EAAD,CAAUC,QAAQ,cAAcJ,MAAO,IAAKM,OAAQ,KACpD,cAACH,EAAA,EAAD,CAAUC,QAAQ,cAAcJ,MAAO,IAAKM,OAAQ,cAZ5D,UAAmBT,EAAnB,mB,eCPFa,EAAmBC,IAAOC,IAAV,6DAwBP3D,IAnBC,SAAC,GAMV,IAAD,MALJ4D,YAKI,MALGzC,IAAc0C,QAKjB,EAJJxB,EAII,EAJJA,iBAKMyB,GAAiB,mBACpB3C,IAAc4C,SAAW,cAAC,EAAD,CAAU1B,iBAAkBA,KADjC,cAEpBlB,IAAc0C,QAAU,cAACG,EAAA,EAAD,KAFJ,GAKvB,OACE,cAACP,EAAD,CAAkBQ,cAAY,UAA9B,SACGH,EAAkBF,Q","file":"static/js/main.5241cef5.chunk.js","sourcesContent":["import {\n  ApolloClient,\n  ApolloLink,\n  HttpLink,\n  InMemoryCache,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nconst API_URL = `https://demo.vendure.io/shop-api`;\n\nconst AUTH_TOKEN_KEY = 'auth_token';\n\nconst httpLink = new HttpLink({\n  uri: API_URL,\n  // This is required if using cookie-based session management,\n  // so that any cookies get sent with the request.\n  credentials: 'include',\n});\n\nconst afterwareLink = new ApolloLink((operation, forward) => {\n  return forward(operation).map((response) => {\n    const context = operation.getContext();\n    const authHeader = context.response.headers.get('vendure-auth-token');\n    if (authHeader) {\n      // If the auth token has been returned by the Vendure\n      // server, we store it in localStorage\n      localStorage.setItem(AUTH_TOKEN_KEY, authHeader);\n    }\n    return response;\n  });\n});\n\nconst client = new ApolloClient({\n  link: ApolloLink.from([\n    // If we have stored the authToken from a previous\n    // response, we attach it to all subsequent requests.\n    setContext((request, operation) => {\n      const authToken = localStorage.getItem(AUTH_TOKEN_KEY);\n      let headers: Record<string, any> = {};\n      if (authToken) {\n        headers.authorization = `Bearer ${authToken}`;\n      }\n\n      return { headers };\n    }),\n    afterwareLink,\n    httpLink,\n  ]),\n  cache: new InMemoryCache(),\n});\n\nexport default client;\n","import React, { Component, ErrorInfo } from 'react';\nimport { GENERIC_ERROR } from './constants';\n\ninterface Props {\n  children: React.ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n}\n\nclass ErrorBoundary extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError = (error: any) => {\n    return { hasError: true };\n  };\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    // Log the error to an error reporting service\n    console.error('ErrorBoundary caught an error: ', error, errorInfo);\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>{GENERIC_ERROR}</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import { Suspense, lazy } from 'react';\nimport { ApolloProvider } from '@apollo/client';\nimport { OrderProvider } from './providers/OrderProvider';\nimport apolloClient from './apollo/client';\nimport ErrorBoundary from './components/ErrorBoundary';\nimport Loading from './components/UI/Loading';\n// Code splitting\nconst Header = lazy(() =>\n  import('./components/Header/Header').then(({ Header }) => ({\n    default: Header,\n  }))\n);\nconst ProductList = lazy(() =>\n  import('./components/Products/ProductList/ProductList').then(\n    ({ ProductList }) => ({ default: ProductList })\n  )\n);\n\nfunction App() {\n  return (\n    <>\n      <Suspense fallback={<Loading />}>\n        <ApolloProvider client={apolloClient}>\n          <OrderProvider>\n            <ErrorBoundary>\n              <Header />\n              <div>\n                <ProductList />\n              </div>\n            </ErrorBoundary>\n          </OrderProvider>\n        </ApolloProvider>\n      </Suspense>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\n  ApolloClient,\n  ApolloLink,\n  createHttpLink,\n  InMemoryCache,\n} from '@apollo/client';\nimport { ApolloProvider } from '@apollo/client/react';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nconst commerceLink = createHttpLink({\n  uri: 'https://shrouded-wave-86340.herokuapp.com/shop-api',\n  headers: {\n    authorization: localStorage.getItem('Auth-Token')\n      ? `Bearer ${localStorage.getItem('Auth-Token')}`\n      : '',\n  },\n});\n\nconst afterwareLink = new ApolloLink((operation, forward) => {\n  return forward(operation).map((response) => {\n    const context = operation.getContext();\n    const authHeader = context.response.headers.get('Vendure-Auth-Token');\n\n    if (authHeader) {\n      localStorage.setItem('Auth-Token', authHeader);\n    }\n    return response;\n  });\n});\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: ApolloLink.from([afterwareLink, commerceLink]),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const PRODUCT_CARD_BUTTON_CONTENT = 'Buy';\nexport const PAGE_SIZE = 5;\nexport enum LOADING_TYPES {\n  DEFAULT = 'default',\n  SKELETON = 'skeleton',\n}\n","import React, { useState } from 'react';\nimport { createContext } from 'react';\nimport { addItemToOrder_addItemToOrder_Order_lines } from '../graphql/__generated__/addItemToOrder';\n\nexport type OrderType = {\n  subTotal: number;\n  cartItems: addItemToOrder_addItemToOrder_Order_lines[];\n  orderCode: string | null;\n  setSubTotal: React.Dispatch<React.SetStateAction<OrderType['subTotal']>>;\n  setCartItems: React.Dispatch<React.SetStateAction<OrderType['cartItems']>>;\n  setOrderCode: React.Dispatch<React.SetStateAction<OrderType['orderCode']>>;\n};\n\nexport const OrderContext = createContext<OrderType | undefined>(undefined);\n\nexport const OrderProvider = ({ children }: { children: React.ReactNode }) => {\n  const [subTotal, setSubTotal] = useState<OrderType['subTotal']>(0);\n  const [cartItems, setCartItems] = useState<OrderType['cartItems']>([]);\n  const [orderCode, setOrderCode] = useState<OrderType['orderCode']>(null);\n\n  const context = {\n    subTotal,\n    cartItems,\n    orderCode,\n    setSubTotal,\n    setCartItems,\n    setOrderCode,\n  };\n\n  return (\n    <OrderContext.Provider value={context}>{children}</OrderContext.Provider>\n  );\n};\n","export const GENERIC_ERROR = 'Something went wrong. Please try again.';\nexport const ITEM_ADDED_SUCCESSFULLY = 'Item added successfully';\n","import React from 'react';\nimport Skeleton from '@mui/material/Skeleton';\nimport Stack from '@mui/material/Stack';\nimport { Box, Grid } from '@mui/material';\n\nexport default function Variants({\n  skeletonQuantity = 1,\n}: {\n  skeletonQuantity?: number;\n}) {\n  return (\n    <Grid container sx={{ justifyContent: 'center' }}>\n      {[...new Array(skeletonQuantity)].map((_, i) => (\n        <Grid item key={`${i}-skeleton`}>\n          <Box sx={{ width: 220, marginRight: 0.5, m: 3 }}>\n            <Skeleton variant=\"rectangular\" animation=\"wave\" height={120} />\n            <br />\n            <Box>\n              <Stack spacing={1}>\n                {/* For variant=\"text\", adjust the height via font-size */}\n                <Skeleton variant=\"text\" sx={{ fontSize: '1rem' }} />\n\n                {/* For other variants, adjust the size with `width` and `height` */}\n                <Skeleton variant=\"circular\" width={40} height={40} />\n                <Skeleton variant=\"rectangular\" width={210} height={60} />\n                <Skeleton variant=\"rectangular\" width={210} height={60} />\n              </Stack>\n            </Box>\n          </Box>\n        </Grid>\n      ))}\n    </Grid>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { LOADING_TYPES } from '../Products/contstants';\nimport Skeleton from './Skeleton';\nimport { CircularProgress } from '@mui/material';\n\nconst LoadingContainer = styled.div`\n  width: 75vw;\n  margin: auto;\n`;\n\nconst Loading = ({\n  type = LOADING_TYPES.DEFAULT,\n  skeletonQuantity,\n}: {\n  type?: LOADING_TYPES;\n  skeletonQuantity?: number;\n}) => {\n  const LoadingComponents = {\n    [LOADING_TYPES.SKELETON]: <Skeleton skeletonQuantity={skeletonQuantity} />,\n    [LOADING_TYPES.DEFAULT]: <CircularProgress />,\n  };\n\n  return (\n    <LoadingContainer data-testid=\"loading\">\n      {LoadingComponents[type]}\n    </LoadingContainer>\n  );\n};\n\nexport default Loading;\n"],"sourceRoot":""}